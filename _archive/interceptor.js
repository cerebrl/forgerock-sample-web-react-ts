(()=>{"use strict";function e(e){const t="http:"===e.protocol&&-1===["","80"].indexOf(e.port)||"https:"===e.protocol&&-1===["","443"].indexOf(e.port)?`:${e.port}`:"";return`${e.protocol}//${e.hostname}${t}`}async function t(e){if(["GET","HEAD"].includes(e.method))return;const t=await e.clone().blob();return t&&t.size?t:void 0}function n(e){return Array.from(e.headers.keys()).reduce(((t,n)=>(t[n]=e.headers.get(n),t)),{})}function r(e,t,n){const r=function(e){const t=(e||"").split("/").map((e=>e.trim())).filter((e=>""!==e));return"root"!==t[0]&&t.unshift("root"),t.map((e=>`realms/${e}`)).join("/")}(t),o={authenticate:`json/${r}/authenticate`,authorize:`oauth2/${r}/authorize`,accessToken:`oauth2/${r}/access_token`,endSession:`oauth2/${r}/connect/endSession`,userInfo:`oauth2/${r}/userinfo`,revoke:`oauth2/${r}/token/revoke`,sessions:`json/${r}/sessions/`};return n&&n[e]?n[e]:o[e]}function o(t,n){const r=new URL(t);if(n.startsWith("/"))return`${e(r)}${n}`;const o=r.pathname.split("/"),s=n.split("/").filter((e=>!!e)),i=[...o.slice(0,-1),...s].join("/");return`${e(r)}${i}`}async function s(e){return{method:e.method,headers:n(e),body:await t(e),mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity}}!function(e){var t,n,i;(null==(n=null==(t=e.interceptor)?void 0:t.urls)?void 0:n.length)||console.warn("No URLs provided for Token Vault interception.");const c=(null==(i=null==e?void 0:e.events)?void 0:i.fetch)||"TVP_FETCH_RESOURCE",a=function(e){var t;const n=(i=e.forgerock.serverConfig.baseUrl)&&"/"!==i.charAt(i.length-1)?i+"/":i,s=(null==(t=e.forgerock)?void 0:t.realmPath)||"root";var i;return[...e.interceptor.urls,`${o(n,r("accessToken",s))}`,`${o(n,r("endSession",s))}?`,`${o(n,r("revoke",s))}`,`${o(n,r("userInfo",s))}`,`${o(n,r("sessions",s))}`]}(e);self.addEventListener("install",(()=>{self.skipWaiting()})),self.addEventListener("activate",(e=>{e.waitUntil(self.clients.claim())})),self.addEventListener("fetch",(e=>{const t=new MessageChannel,n=e.request,r=e.request.url;(function(e,t){for(const n of t){if(n.endsWith("*")){const t=n.slice(0,-1);if(e.startsWith(t))return!0}if(e.includes(n))return!0}return!1})(r,a)&&(console.log(`Intercepting ${r}`),e.respondWith(new Promise((async(o,i)=>{let a;try{a=await self.clients.get(e.clientId)}catch(e){return i(`Error finding client in Token Vault Interceptor (Service Worker): ${e}`)}if(!a)return i("Error finding client in Token Vault Interceptor (Service Worker)");const l={url:n.url,options:await s(n)};a.postMessage({type:c,request:l},[t.port2]),t.port1.onmessage=e=>{console.log(`Returning ${r}`);const t=(null==e?void 0:e.data)||{};o(new Response(JSON.stringify(null==t?void 0:t.body),{headers:null==t?void 0:t.headers,status:null==t?void 0:t.status,statusText:null==t?void 0:t.statusText}))}}))))}))}({interceptor:{urls:["http://localhost:5174/*"]},forgerock:{serverConfig:{baseUrl:"https://forgerock.crbrl.io/am/",timeout:5e4},realmPath:"alpha"}})})();